/* ---------------------------------------------------------------------- *\
  BORDER RADIUS
  e.g: borderRadius(10,'%') -> border-radius: 10%;
\* ---------------------------------------------------------------------- */

@mixin borderRadius($val, $unit:false) {

    @if $unit {
      $val: stripUnit($val);

      @if type-of($val) == number and $val != 0 {

        $cVal: #{$val}#{$unit};
      
      } @else if type-of($val) == list {

        @each $i in $val {
          @if type-of($i) == number and $i != 0 {
            $i: #{$i}#{$unit};
          }
          $cVal: append($cVal,$i);
        }
      } @else {
        $cVal: $val;
      }

    } @else {
      
      $cVal: rem($val);
    
    }

    @include prefix(border-radius, $cVal, webkit)
}

/* ---------------------------------------------------------------------- *\
  BOX SHADOW
  wip
\* ---------------------------------------------------------------------- */

@mixin boxShadow($horizontalLength, $verticalLength, $blurRadius:false, $spread:false, $color:false, $inset:false) {

  @if $inset {
    $insetVal: inset;
  } @else {
    $insetVal: null;
  }

  $boxShadow: $insetVal $horizontalLength $verticalLength $blurRadius $spread $color;
  @include prefix(box-shadow, $boxShadow, webkit)

}


/* ---------------------------------------------------------------------- *\
  BOX SIZING
  this should always be border-box
\* ---------------------------------------------------------------------- */

@mixin boxSizing($val:border-box) {
  @include prefix(box-sizing, $val, webkit moz) 
}


/* ---------------------------------------------------------------------- *\
  GRADIENT GENERATOR 
  Usage: @include gradient($orientation,($colorList),[$angle]);
  $orientation: string -> horizontal / vertical / radial / angle
  $colorList: a list of pairs for color stops (color percentage)
             e.g (rgb(0,0,0) 0%, rgb(255,255,255) 15%, rgb(0,0,0) 100%)
  $angle: if $orientation: angle, then here you set the angle degree
           e.g. @include gradient(angle,(...),50deg);
\* ---------------------------------------------------------------------- */

@mixin gradient($orientation,$colorList,$angle:false) {
  
  // set type of gradient
  $gradType: linear;
  
  @if $orientation == radial {
    $gradType: radial;
  }
  
  $direction-1: left;
  $direction-2: left top, right top;
  $direction-3: to right;
  $gradientType: 1;

  // "translate" $orientation
  @if $orientation == radial {
    
    $direction-1: center, ellipse cover;
    $direction-2: radial, center center, 0px, center center, 100%;
    $direction-3: ellipse at center;
  
  } @else if $orientation == vertical {
  
    $direction-1: top;
    $direction-2: left top, left bottom;
    $direction-3: to bottom;
    $gradientType: 0;

  } @else if $orientation == angle {
    $direction-1: $angle - 180;
    $direction-2: $angle; // TO DO
    $direction-3: $angle;
    $gradientType: 1;
  }

  // fallback in case gradient is not supported
  background: first(first($colorList));

  $colorsFormat-1: $colorList; // this has the correct format
  $colorsFormat-2: null;
  
  // prepare the format for the webkit custom gradient
  $comma: null;
  @each $i in $colorList {
    
    $colorsFormat-2: $colorsFormat-2 + $comma + color-stop(nth($i,2),nth($i,1));
    
    // add comma after first iteration
    $comma: unquote(',');
  }


  background: -moz-#{$gradType}-gradient( 
    $direction-1, 
    $colorsFormat-1
  );
  
  // TO FIX
  // issue: $colorsFormat-2 breaks the layout
  // background: -webkit-gradient(
  //     $gradType,
  //     $direction-2,
  //     $colorsFormat-2
  // );  

  background: -webkit-#{$gradType}-gradient( 
    $direction-1,
    $colorsFormat-1
  );

  background: -o-#{$gradType}-gradient( 
    $direction-1,
    $colorsFormat-1
  );

  background: -ms-#{$gradType}-gradient( 
    $direction-1,
    $colorsFormat-1
  );

  background: #{$gradType}-gradient(
    $direction-3,
    $colorsFormat-1
  );
  
  $ieFirstColor: ie-hex-str(first(first($colorList)));
  $ieLastColor: ie-hex-str(first(last($colorList)));

  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$ieFirstColor}', endColorstr='#{$ieLastColor}',GradientType=1);
}



/* ---------------------------------------------------------------------- *\
  OPACITY
  argument between 0 and 1
\* ---------------------------------------------------------------------- */

@mixin opacity($opacity) {
  opacity: $opacity;
  
  $opacityIE: $opacity * 100;
  filter: alpha(opacity=$opacityIE);
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$opacityIE})";
}



/* ---------------------------------------------------------------------- *\
  POSITION
\* ---------------------------------------------------------------------- */

@mixin pos($top:false, $right:false, $bottom:false, $left:false, $position:false, $zIndex: false) {
  
  $top: rem($top);
  $right: rem($right);
  $bottom: rem($bottom);
  $left: rem($left);


  @if $position { position: $position; }
  @if $top { top: $top; }
  @if $right { right: $right; }
  @if $bottom { bottom: $bottom; }
  @if $left { left: $left; }
  @if $zIndex { z-index: $zIndex; }
}

@mixin posAbs($top:false, $right:false, $bottom:false, $left:false, $zIndex:false) {
  @include pos($top, $right, $bottom, $left, $position:absolute, $zIndex:$zIndex);
}

@mixin centerAbs($zIndex:false) {
  @include posAbs(0,0,0,0,$zIndex);
  margin: auto;
}



/* ---------------------------------------------------------------------- *\
  RGBA
 
  Credits: @cballenar â€” January 4th, 2014

  A SCSS mixin to create RGB fallbacks for RGBa styles.

  This mixin takes up to 4 arguments (minimum of two)
   - $property: the css property to be used,      e.g.: 'border'
   - $attributes: the additional attributes,      e.g.: '1px solid'
   - $color: the translucent color to be used,    e.g.: 'rgba(240,20,200,.5)'
   - $background: color that will be used in mix, e.g.: '#DADADA'

  You're required to enter at least the $property and $color variables, so you end up
  with the following options:
   - @include alpha-me($property, $color);
   - @include alpha-me($property, $color, $background);
   - @include alpha-me($property, $attributes, $color);
   - @include alpha-me($property, $attributes, $color, $background);

  E.g:
    .element { 
      @include alpha-me( color, rgba(black,.5) );

      @include alpha-me( background-color, rgba(#dffa14,.5), #529ef0);

      @include alpha-me( box-shadow, 1px 1px 2px, rgba(white, .25));

      @include alpha-me( border, 3px solid, rgba(240,20,200,.5), #DADADA); }

  
  Notes
   - If no background color is specified, white is used by default
   - We can use the rgba SASS function to enter the translucent color in other formats
     - rgba(red, .5)
     - rgba(#dffa14, .75)
   - Can you think of a better name for the mixin? I'm not in love with it...

\* ---------------------------------------------------------------------- */

@mixin rgba($var1, $var2, $var3:null, $var4:null) {

  // Set variables for global use
  $property:   $var1;
  $attributes: null;
  $color:      null;
  $colorBg:   null;

  // Check if $var2 is a color
  @if ( type-of($var2) == color ) { 

    // Set default background if not specified
    @if not $var3 { $var3: #FFFFFF; }

    // Update variables
    $color:      $var2;
    $colorBg:   $var3;


  // Otherwise it should be the attributes
  } @else if ( type-of($var2) != color ) {

    // Set default background if not specified
    @if not $var4 { $var4: #FFFFFF; }

    // Update variables
    $attributes: $var2;
    $color:      $var3;
    $colorBg:   $var4;

  }

  // Extract alpha channel from color
  $percent: alpha($color) * 100%;

  // Make color opaque
  $opaque: opacify($color, 1);

  // Blend color with background.
  $colorSolid: mix($opaque, $colorBg, $percent);

  // Return built style with solid color and transparent color
  #{$property}: #{$attributes} $colorSolid;
  #{$property}: #{$attributes} $color;
}




/* ---------------------------------------------------------------------- *\
  TRANSITION
  $property: all / background / color / height / width / outline
  $duration: any number
  $unit: ms / s
  $function: ease / linear / ease-in / ease-out / ease-in-out
\* ---------------------------------------------------------------------- */

@mixin transition($property:all, $duration:200, $unit: ms, $function: ease) {
  @include prefix(transition, $property #{$duration}#{$unit} $function);
}
