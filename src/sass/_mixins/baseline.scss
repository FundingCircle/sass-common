$REMsupport: false;
$capHeight: .7;
$gridline: $fontBaseline * 1px;
$gridOpacity: .2;

@mixin baseline($fontScale, $fontWeight: regular, $below: 0, $above: 0) {
  // during calculations, all values should remain unitless

  /* ------------------- *\
    CALCULATE FONT SIZES
  \* ------------------- */

  // default value
  $fontSize: $fontSizeBase * 1px !default;

  // make sure we don't go too big or too small
  @if $fontScale > 6 {
    $fontScale: 6;
  } @else if $fontScale < -1 {
    $fontScale: -1;
  }

  // STEP 1: if negative parameter, we need to use 1 / $ratio
  @if $fontScale < 0 {
    $calcRatio: 1 / $ratio;
    $calcSqrtRatio: 1 / $sqrtRatio;
    $fontScale: negative($fontScale);
  } @else {
    $calcRatio: $ratio;
    $calcSqrtRatio: $sqrtRatio;
  }

  // STEP 2: calculate the multiplier for each value
  @if $fontScale == 0 {
    $multiplier: 1;
  } @else if $fontScale % 2 == 0 {
    $multiplier: pow($calcRatio, $fontScale / 2);
  } @else {
    $multiplier: pow($calcSqrtRatio, $fontScale);
  }

  // calculate the font size (this needs to be unitless)
  $fontSize: round($fontSizeBase * $multiplier);


  /* --------------------- *\
     CALCULATE LINE HEIGHT
  \* --------------------- */

  $lineHeight: $fontSize * 1.4 !default;

  // we find out the remainder
  $remainder: $fontSize % $fontBaseline;

  // the lineHeight is always a multiple of fontBaseline
  $lineHeight: $fontSize - $remainder + $fontBaseline;


  /* ------------------------- *\
     CALCULATE BASELINE VALUES
  \* ------------------------- */

  // base adjustment top / bottom
  $baseAdjustment: ($fontSize / 2 * (($lineHeight * $fontSizeBase / $fontSize) - $capHeight)) / $fontSizeBase + .00001;

  // amount of spacing to the bottom
  $basePush: rem($below) - rem($baseAdjustment * 1px);
  $baseAbovePush: rem($above *  $fontBaseline / $fontSizeBase);


  /* ------------------------- *\
     SET FONT WEIGHT
  \* ------------------------- */
    $fontWeightNumber: 400;

    @if $fontWeight == thin {
      $fontWeightNumber: 300;
    } @else if $fontWeight == bold {
      $fontWeightNumber: 600;
    }

  /* -------------------- *\
     APPLY ALL THE VALUES
  \* -------------------- */

  font-size: rem($fontSize * 1px);
  line-height: rem($lineHeight * 1px);

  @if $above > 0 {
    padding-top: $baseAbovePush;
  }
  margin-bottom: 32 - $baseAdjustment * 1px;
  margin-top: $baseAdjustment * 1px;

  font-weight: $fontWeightNumber;

  $gridline: rem(.5);
  $gridOpacity: .2;
  // background: repeating-linear-gradient(to bottom, rgba(171, 51, 131, $gridOpacity) 0, rgba(171, 51, 131, $gridOpacity) $gridline, rgba(255,255,255,$gridOpacity) $gridline, rgba(255,255,255,$gridOpacity) (2 * $gridline));
}




// TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP //

.baseline {
  position: relative;
  &:after {
    @include posAbs(0, 0, 0, 0, 1000);
    content: '';
    display: block;
    width: 100%;
    height: 100%;
    pointer-events: none;
  }

  input:checked ~ &:after {
    background: repeating-linear-gradient(to bottom, rgba(171, 51, 131, $gridOpacity) 0, rgba(171, 51, 131, $gridOpacity) $gridline, rgba(255,255,255,$gridOpacity) $gridline, rgba(255,255,255,$gridOpacity) (2 * $gridline));
  }
}

#show-baseline {
  display: none;

  + label {
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    color: rgb(255, 255, 255);
    background: $ColorBrand1;
    z-index: 1001;
    text-align: center;
    padding: 5px;
  }
}

.testbaseline {
  @include baseline(1, regular, 5, 0);
}

main[data-role="wrap"] {
  background: repeating-linear-gradient(to bottom, rgba(171, 51, 131, $gridOpacity) 0, rgba(171, 51, 131, $gridOpacity) $gridline, rgba(255,255,255,$gridOpacity) $gridline, rgba(255,255,255,$gridOpacity) (2 * $gridline));
}
// TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP TEMP //


