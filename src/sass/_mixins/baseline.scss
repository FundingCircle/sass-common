// Baseline
//
// Align typography to baseline
//
// $fontScale: integer - [-1, 6]
// $fontWeight: thin, regular, bold
// $below: how many REMs to add bellow as margin
// $above: how many REMs to add above as padding
// $hasChild: HANDLE WITH CARE - tries to fix the position on the grid for children element
// $hasChild:  - APPLIES POSITION RELATIVE the all direct children elements
// Styleguide 1.0



@mixin baseline($fontScale, $fontWeight: regular, $below: 0, $above: 0, $hasChild: false) {
  // during calculations, all values should remain unitless

  /* ------------------- *\
    CALCULATE FONT SIZES
  \* ------------------- */

  // default value
  $fontSize: $fontSizeBase * 1px !default;

  // make sure we don't go too big or too small
  @if $fontScale > 6 {
    $fontScale: 6;
  } @else if $fontScale < -1 {
    $fontScale: -1;
  }

  // STEP 1: if negative parameter, we need to use 1 / $ratio
  @if $fontScale < 0 {
    $calcRatio: 1 / $ratio;
    $calcSqrtRatio: 1 / $sqrtRatio;
    $fontScale: negative($fontScale);
  } @else {
    $calcRatio: $ratio;
    $calcSqrtRatio: $sqrtRatio;
  }

  // STEP 2: calculate the multiplier for each value
  @if $fontScale == 0 {
    $multiplier: 1;
  } @else if $fontScale % 2 == 0 {
    $multiplier: pow($calcRatio, $fontScale / 2);
  } @else {
    $multiplier: pow($calcSqrtRatio, $fontScale);
  }

  // calculate the font size (this needs to be unitless)
  $fontSize: round($fontSizeBase * $multiplier);


  /* --------------------- *\
     CALCULATE LINE HEIGHT
  \* --------------------- */

  $lineHeight: $fontSize * 1.4 !default;

  // we find out the remainder
  $remainder: $fontSize % $fontBaseline;

  // the lineHeight is always a multiple of fontBaseline
  $lineHeight: $fontSize - $remainder + $fontBaseline;


  /* ------------------------- *\
     CALCULATE BASELINE VALUES
  \* ------------------------- */

  // we need to find the error - distance between baseline and the base of the font
  $baselineAdjustment: rem($fontSize * (($lineHeight / $fontSize) - $capHeight) / 2 + .00001px);


  /* ------------------------- *\
     SET FONT WEIGHT
  \* ------------------------- */
    $fontWeightNumber: 400;

    @if $fontWeight == thin {
      $fontWeightNumber: 300;
    } @else if $fontWeight == bold {
      $fontWeightNumber: 600;
    }

  /* -------------------- *\
     APPLY ALL THE VALUES
  \* -------------------- */

  font-size: rem($fontSize * 1px);
  line-height: rem($lineHeight * 1px);

  font-weight: $fontWeightNumber;

  padding-top: $baselineAdjustment;

  @if $hasChild {
    & > * {
      position: relative;
      top: negative($baselineAdjustment);

      &:last-child {
        margin-bottom: $baselineAdjustment + rem($below) - $baselineAdjustment;
      }
    }
  } @else {
    margin-bottom: rem($below) - $baselineAdjustment;
  }

}
