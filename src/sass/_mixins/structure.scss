/* ---------------------------------------------------------------------- *\
  CENTER BLOCK
  center block elements using margin: auto
  you can set the top and bottom here or set them separately
  if centerBlock(value, true) -> margin: value auto;
\* ---------------------------------------------------------------------- */

@mixin centerBlock($top:false, $bottom:false) {

  @if $top { $top: rem($top); }
  @if $bottom { $bottom: rem($bottom); }

  @if $top and $bottom == false {

    margin: {
      top: $top;
      left: auto;
      right: auto;
    }

  } @else if $top == false and $bottom {

    margin: {
      left: auto;
      right: auto;
      bottom: $bottom;
    }

  } @else if $top and $bottom == true {

    margin: $top auto;

  } @else if $top and $bottom {

    margin: $top auto $bottom;

  } @else {
    margin: {
      left: auto;
      right: auto;
    }
  }

}



// Calculate the general aspect ratio starting from an arbitrary number (1)
$colRatio: 1;
@for $i from 1 through 7 {
  $colListLast: last($colRatio);
  $colRatio: append($colRatio, $colListLast * $ratio);
}

@mixin tableCell($verticalAlign,$colList:false,$padding: false) {
  display: table-cell;
  vertical-align: $verticalAlign;

  @if $padding {
    padding: $padding;
  }

  @if $colList == equal {
    width: 1%;
  } @else if $colList != false {
    // calculate the passed vars sum - in order to have general proportions
    // we need this so we can apply the rule of three to find the new proportions
    $colSum : 0;

    @each $colVal in $colList {
      $colSum: $colSum + nth($colRatio,$colVal);
    }

    $colFinal: ();
    @each $colVal in $colList {
      $colFinal: append($colFinal,nth($colRatio,$colVal) * 100 / $colSum);
    }
    $iteration : 1; // do not use index(), it fails on columns with same argument

  @each $i in $colFinal {
      &:nth-child(#{$iteration}) {
        $iteration: $iteration + 1;
        width: percentage($i)/100;
      }
    }

  }

}



/* ---------------------------------------------------------------------- *\
  RESET TABLE LAYOUT ON BREAKPOINTS
  choose between what points to transform the table layout to one column
\* ---------------------------------------------------------------------- */

@mixin resetColumns($minVal,$maxVal) {
  @include breakPoints($minVal,$maxVal) {

    display: block;

    & > *,
    & > *[class*="col-"] {
      display: block;
      width: 100%;
    }
  }
}



/* ---------------------------------------------------------------------- *\
  GROUP ELEMENTS ON MULTIPLE COLUMNS
  $item is an arglist which takes lists with the following params:
    - min breakpoint - integer or false
    - max breakpoint - integer or false
    - number of columns - integer
    - center last - bolean (use with care, it generates a lot of CSS)

  e.g:
  layout with:
    - 1 column between a and b
    - 2 columns between b and c
    - 3 columns between c and d and last one centered

  @include groupElements(a b 1 false, b c 2 false, 3 c d true);
\* ---------------------------------------------------------------------- */

@mixin groupElements($item...) {
  $bpMin: 9999;
  $bpMax: 0;

  @each $list in $item {
    $listBpMin: nth($list, 1); // breakpoint min - integer or false
    $listBpMax: nth($list, 2); // breakpoint max - integer or false
    $listCols:  nth($list, 3); // number of columns - integer
    $listLast:  nth($list, 4); // center last one - bolean

    // find the smallest breakpoint
    // we need this to know where to apply the general styling
    @if $bpMin != false {
      @if $listBpMin == false {
        $bpMin: $listBpMin;
      } @else if $listBpMin < $bpMin {
        $bpMin: $listBpMin;
      }
    }

    // find the largest breakpoint
    // we need this to know where to apply the general styling
    @if $bpMax != false {
      @if $listBpMax == false {
        $bpMax: $listBpMax;
      } @else if $listBpMax > $bpMax {
        $bpMax: $listBpMax;
      }
    }

    @include breakPoints($listBpMin, $listBpMax) {
      > * {
        // width is 100 divided by the number of columns
        width: percentage(1 / $listCols);

        &:nth-child(#{$listCols}n+1) {
          // add the clear to every first item on a new row
          @include clear(false, false);

          @if $listLast {
            // find the first item of the last row and add the correction by figuring out how many elements are on that list
            @for $i from 1 through ($listCols - 1) {
              &:nth-last-child(#{$i}) {
                margin-left: percentage((1 / $listCols ) / 2 * ($listCols - $i));
              }
            }
          }
        }

      }
    }

  }

  @include breakPoints($bpMin, $bpMax) {
    @include clear(true, false);
    display: block;

    > * {
      float: left;
    }
  }

}



@mixin tableCellV2($verticalAlign: false, $cols: false, $padding: false) {
  display: table-cell;
  @if $verticalAlign {
    vertical-align: $verticalAlign;
  }

  @if $padding {
    padding: rem($padding);
  }

  @if $cols == equal {
    width: 1%;
  } @else if type-of($cols) == list {

    $cols: colsWidth($cols);

    @for $i from 1 through length($cols) {
      &:nth-child(#{$i}) {
        width: nth($cols, $i) * 1%;
      }
    }

  }
}



/* ---------------------------------------------------------------------- *\
  TABLES
  Everything related to tables
      - all arguments are optional
      - structure -> table > table-cell

  $verticalAlign: top / baseline / ... / http://goo.gl/d8gtec

  $reset: two values between which the cells fall to full-width blocks

  $hide: two values between which the table is hidden

  $cols: false / equal / list
    a) FALSE - lets the browser decide the column widths
    b) EQUAL - all equal columns (does not work with table-layout: fixed)
    c) LIST - it uses the golden ratio formula: (xi+xj)/xi = ratio

  $row: boolean -> if true, the structure is table > row > cell

  $padding -> default is $defaultColsPadding

  e.g: @include table( top, 700px 1000px , 100px 480px , 2 1 7 , false , 10 )
                        |    |              |             |      |        | padding
                        |    |              |             |      | 1 row
                        |    |              |             | 3 cols with
                        |    |              |             | custom ratio
                        |    |              | hide between 100px-480px
                        |    | set cells to block and width: 100%
                        |    | between 700-1000px
                        | vertical-align: top
\* ---------------------------------------------------------------------- */

@mixin table($verticalAlign:top, $reset: false, $hide: false, $cols: false, $row:false, $padding: $defaultColsPadding) {

  // table general stuff
  width: 100%;

  // hide or reset at certain breakpoints
  @if $row {
    & > * > * {
      @if $reset { @include showBetweenWidths(first($reset), last($reset)) }
      @if $hide { @include hideBetweenWidths(first($hide), last($hide)) }
    }
  } @else {
    & > * {
      @if $reset { @include showBetweenWidths(first($reset), last($reset)) }
      @if $hide { @include hideBetweenWidths(first($hide), last($hide)) }
    }
  }

  // columns outside the $hide and $reset areas
  $minPoint: false;

  @if $hide and $reset {
    @if last($hide) > last($reset) {
      $minPoint: last($hide);
    } @else {
      $minPoint: last($reset);
    }
  } @else if $hide {
    $minPoint: last($hide);
  } @else if $reset {
    $minPoint: last($reset);
  }

  @mixin dtStyle {
   display: table;

   @if $row {
     & > * { display: table-row; }
     & > * > * {
       @include tableCellV2($verticalAlign, $cols, $padding);
     }
   } @else {
     & > * {
      @include tableCellV2($verticalAlign, $cols, $padding);
     }
   }
  }

  @if $ie {
    @include dtStyle;
  } @else {
    @include breakPoints($minPoint, false) {
      @include dtStyle;
    }
  }

}



/* ---------------------------------------------------------------------- *\
  FLOAT MIXINS
  - generate classes for different box sizes
  - cols format is &-[x]size
  - if you have 5 params inside class .test, the result will be:
    .test-col--xsmall {}
    .test-col--small {}
    .test-col--medium {}
    .test-col--large {}
    .test-col--xlarge {}
  - adding more values will add more x to the size (eg: xxsize, xxxlarge, etc.)
\* ---------------------------------------------------------------------- */


@mixin cols($cols) {

  // sort cols and convert to percentages
  $cols: colsWidth(quickSort($cols));
  $colsLength: length($cols);

  $splitMediumList: ceil($colsLength / 2);

  $splitSmallList: $splitMediumList - 1;
  $splitLargeList: $splitMediumList + 1;

  @if $colsLength <= 2 {
    $splitSmallList: $splitMediumList;
    $splitMediumList: $splitMediumList + 1;
  }

  &-col-- {

    // small size columns
    $prefixSmall: '';

    @for $i from $splitSmallList through 1 {
      &#{$prefixSmall}small {
        width: nth($cols, $i) * 1%;
      }
      $prefixSmall: x#{$prefixSmall};
    }

    // medium size columns
    &medium {
      width: nth($cols, $splitMediumList) * 1%;
    }

    // large size columns
    $prefixLarge: '';

    @for $i from $splitLargeList through length($cols) {
      &#{$prefixLarge}large {
        width: nth($cols, $i) * 1%;
      }
      $prefixLarge: x#{$prefixLarge};
    }
  }

}

/* ---------------------------------------------------------------------- *\
  WRAP
  Adjust the left and right padding of selected element

  $padding: false / true / number
    a) FALSE - default value
    b) TRUE - default padding applied
    c) NUMBER - enter a numeric value to be received in REMs, e.g. entering "1" would pass that value as rem(1)

  $breakPoints: two values that determine when the padding is applied
\* ---------------------------------------------------------------------- */


%wrapPlaceholder {
  @include centerBlock(0, true);
  width: 100%;
  max-width: $maxWrapWidth;
}

@mixin wrapThis($padding: false, $breakPoints: (false false)) {
  @extend %wrapPlaceholder;

  @if type-of($padding) == number {
    @include breakPoints(first($breakPoints), last($breakPoints)) {
      padding-left: rem($padding);
      padding-right: rem($padding);
    }
  } @else if $padding {
      @include breakPoints(first($breakPoints), last($breakPoints)) {
        padding-left: $defaultColsPadding;
        padding-right: $defaultColsPadding;
      }
  }
}



/* ---------------------------------------------------------------------- *\
  RATIO WIDTH
  Set the width of an element in a golden ratio with the page width

    $rwMainCol: the ratio for the element
    $rwOtherCols: ratio for missing columns or empty space
    $rwCenter: center the element horizontally
    $rwBrakePoints: apply the change only between two brakepoints

    e.g: @include ratioWidth(5, 3 2, true, $bpMobilePortrait $bpDesktop);

\* ---------------------------------------------------------------------- */

@mixin ratioWidth($rwMainCol, $rwOtherCols: false, $rwCenter: false, $rwBrakePoints: false) {

  @include breakPoints(first($rwBrakePoints), last($rwBrakePoints)) {
    @if $rwOtherCols {
        width: last(colsWidth(append($rwOtherCols, $rwMainCol))) * 1%;
    } @else {
      width: 100%;
    }

    @if $rwCenter {
      @include centerBlock();
    }
  }
}
