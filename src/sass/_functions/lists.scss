// List manipulations
//
// All the functions that alter a list
//
// Styleguide 1.2



// First item
//
// Get the first item from a list
//
// markup:
// first($list)
// // $list: 5 1 2 6 10;
// // first($list) -> 5
//
// Styleguide 1.2.1

@function first($list) {
  @return nth($list, 1);
}



// Last item
//
// Get the last item from a list
//
// markup:
// last($list)
// // $list: 5 1 2 6 10
// // last($list) -> 10
//
// Styleguide 1.2.2

@function last($list) {
  @return nth($list, length($list));
}



// Remove from list
//
// Removes an item from a list
//
// markup:
// remove($list, $val)
//
// Styleguide 1.2.3

@function removeFromList($list, $val) {

  $newList: ();

  @for $i from 1 through length($list) {
    @if nth($list, $i) != $val {
      $newList: append($newList, nth($list, $i));
    }
  }

  @return $newList;
}



// Replace value from list

@function replaceFromList($list, $oldVal, $newVal) {

  $newList: ();

  @for $i from 1 through length($list) {

    @if nth($list, $i) == $oldVal {
      $newList: append($newList, $newVal);
    } @else {
      $newList: append($newList, nth($list,$i));
    }

  }

  @return $newList();
}


// Find in list

@function findInList($list, $val) {
  $flag: false;

  @for $i from 1 through length($list) {
    @if nth($list, $i) == $val {
      $flag: true;
    }
  }

  @return $flag;
}


// Insert in list

@function insertInList($list, $val, $position) {
  $newList: ();

  @if $position <= length($list) {

    @for $i from 1 through length($list) {
      @if $i == $position {
        $newList: append($newList, $val);
      }

      $newList: append($newList, nth($list, $i));
    }

  } @else {
    $newList: append($list, $val);
  }


  @return $newList();
}



// MERGE INTERVALS

@function mergeIntervals($intervals...) {
  $newIntervals: ();
  $skipThese: ();

  $intervalsLength: length($intervals);

  @for $i from 1 through $intervalsLength {
    $first: first(nth($intervals, $i));
    $last: last(nth($intervals, $i));


    @if findInList($skipThese, $first $last) == false {

      @for $j from $i+1 through $intervalsLength {
        $firstC: first(nth($intervals, $j));
        $lastC: last(nth($intervals, $j));


        // check to see if the intervals are overlapped (we need to skip the ones that we already did)
        @if $last >= $firstC and $first <= $lastC and findInList($skipThese, $firstC $lastC) == false {

          // does the new interval have a lower margin?
          @if $first > $firstC {
            $first: $firstC;
          }

          // does the new interval have a higher margin?
          @if $last < $lastC {
            $last: $lastC;
          }

          // this interval was absorbed into the new intervals so we can remove it
          // $intervals: removeFromList($intervals, nth($intervals, $j));

          // this interval was absorbed into the new one, so we can flag it (so we can skip it from iteration)
          // $intervals: replaceFromList($intervals, $firstC $lastC, test);

          $skipThese: append($skipThese, ($firstC $lastC), comma);
        }


      }

      $newIntervals: append($newIntervals, ($first $last), comma);
    }

  }

  @return $newIntervals;
}


// Largest in list

@function largestNoInList($list) {
  $largest: first($list);

  @for $i from 1 through length($list) {
    @if nth($list, $i) > $largest {
      $largest: nth($list, $i);
    }
  }

  @return $largest;
}

// Smallest in list

@function smallestNoInList($list) {
  $smallest: first($list);

  @for $i from 1 through length($list) {
    @if nth($list, $i) < $smallest {
      $smallest: nth($list, $i);
    }
  }

  @return $smallest;
}



// QUICK SORT
// As seen here: http://css-tricks.com/snippets/sass/sorting-function/

// Default order used to determine which string comes first
$default-order: "!" "#" "$" "%" "&" "'" "(" ")" "*" "+" "," "-" "." "/" "[" "unquote('\'')" "]" "^" "_" "{" "|" "}" "~" "0" "1" "2" "3" "4" "5" "6" "7" "8" "9" "a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "n" "o" "p" "q" "r" "s" "t" "u" "v" "w" "x" "y" "z" !default;


// Compares two string to determine which comes first
// @access private
// @param {String} $a - first string
// @parem {String} $b - second string
// @param {List} $order - order to deal with
// @return {Bool}

@function _str-compare($a, $b, $order) {
  @if type-of($a) == "number" and type-of($b) == "number" {
    @return $a < $b;
  }

  $a: to-lower-case($a + unquote(""));
  $b: to-lower-case($b + unquote(""));

  @for $i from 1 through min(str-length($a), str-length($b)) {
    $char-a: str-slice($a, $i, $i);
    $char-b: str-slice($b, $i, $i);

    @if $char-a and $char-b and index($order, $char-a) != index($order, $char-b) {
      @return index($order, $char-a) < index($order, $char-b);
    }
  }

  @return str-length($a) < str-length($b);
}


// Quick sort
// @author Hugo Giraudel
// @param {List} $list - list to sort
// @param {List} $order [$default-order] - order to use for sorting
// @return {List}
// @require {function} _str-compare
// @require $default-order
@function quickSort($list, $order: $default-order) {
  $less:  ();
  $equal: ();
  $large: ();

  @if length($list) > 1 {
    $seed: nth($list, ceil(length($list) / 2));

    @each $item in $list {
      @if $item == $seed {
        $equal: append($equal, $item, list-separator($list));
      } @else if _str-compare($item, $seed, $order) {
        $less: append($less, $item, list-separator($list));
      } @else if not _str-compare($item, $seed, $order) {
        $large: append($large, $item, list-separator($list));
      }
    }

    @return join(join(quickSort($less, $order), $equal), quickSort($large, $order));
  }

  @return $list;
}





// Reverse list
//
// Reverse the order of the elements inside a list
//
// markup:
// reverseList($list)
// // $list: 5 1 2 6 10
// // last($list) -> 10 6 2 1 5;
//
// Styleguide 1.2.4

@function reverseList($list, $separator: auto) {
  $reversedList: ();
  $listLength: length($list);

  @for $i from 1 through $listLength {
    $reversedList: append($reversedList, nth($list, ($listLength + 1 - $i)), $separator);
  }

  @return $reversedList;
}
