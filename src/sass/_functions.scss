/* ---------------------------------------------------------------------- *\
  POWER
  $number to be rised to the power of $exp
  $exp must be an integer
\* ---------------------------------------------------------------------- */

@function pow($number, $exp) {
  $value: $number;
  @if $exp > 0 {
    // If the exponent is positive, multiply.
    @for $i from 2 through $exp {
      $value: $value * $number;
    }
  }
  @else if $exp < 0 {
    // If the exponent is negative, divide.
    @for $i from 0 through -$exp {
      $value: $value / $number;
    }
  }
  @else {
    // If the exponent is zero, just return 1.
    $value: 1;
  }
  @return $value;
}



/* ---------------------------------------------------------------------- *\
  FIRST ITEM IN A LIST
\* ---------------------------------------------------------------------- */

@function first($list) {
  @return nth($list, 1);
}



/* ---------------------------------------------------------------------- *\
  LAST ITEM IN A LIST
\* ---------------------------------------------------------------------- */

@function last($list) {
  @return nth($list, length($list));
}



/* ---------------------------------------------------------------------- *\
  STRIP UNIT
\* ---------------------------------------------------------------------- */

@function stripUnit($value) {
  @return $value / ($value * 0 + 1);
}



/* ---------------------------------------------------------------------- *\
  SEPARATE UNIT AND VALUES
  - returns a list ($val,$unit)
\* ---------------------------------------------------------------------- */

@function separateUnit($val) {
  $unit: false;
  
  @if unit($val) != '' {
    $unit: unquote(unit($val));
    $val: stripUnit($val);
  }

  @return($val,$unit);
}



/* ---------------------------------------------------------------------- *\
  FROM REM TO PX
  $value: raw value, without prefix (rem)
  $list - if you want to convert a list, set to true
        - e.g. @include remToPx(2 6 4 10, true);
\* ---------------------------------------------------------------------- */

@function remToPx($value,$list:false) {
  @if $list {
    $tempVal: ();
    @each $i in $value {
      $tempVal: $tempVal + #{$i * $fontSizeBase}px + ' ';
    }
    $value: $tempVal;
  } @else {
    $value: #{$value * $fontSizeBase}px;
  }
  @return $value;
}



/* ---------------------------------------------------------------------- *\
  PARSE VALS
  gets a list of values
  returns them as a two items list
  first item are the values converted to PX
  second item are the values with REM prefix attached
  e.g: parseVals(10 auto 20) => (160px auto 320px, 10rem auto 20rem)
  requires remToPx function
\* ---------------------------------------------------------------------- */

@function parseVals($val) {
  $valPx: ();
  $valRem: ();
  @each $i in $val {
    @if($i != auto and $i != 0 and $i != inherit) {
      $rem: #{$i}rem;
      $px: remToPx($i);
    } @else {
      $rem: $i;
      $px: $i;
    }
    $valPx: append($valPx,$px);
    $valRem: append($valRem,$rem);
  }

  @return($valPx,$valRem);
}



/* ---------------------------------------------------------------------- *\
  CONVERT UNITLESS TO PX
\* ---------------------------------------------------------------------- */

@function unitless($val,$unit:false) {
 
  @if $val != false and $val != true and unit($val) == '' {
    $val: $val * 1px;
  }

  @return $val;
}



/* ---------------------------------------------------------------------- *\
  VALUE NEGATIVE
\* ---------------------------------------------------------------------- */

@function negative($val) {
  @if $val == true {
    $val: false;
  } @else if $val == false {
    $val: true;
  } @else {
    $val: $val * (-1);
  }
  @return $val;
}



/* ---------------------------------------------------------------------- *\
  MULTIPLIER
  - takes a number and returns the REM or PX value of that number
\* ---------------------------------------------------------------------- */

@function multiplier($val) {
  
  // just to make sure we have a fallback for multiplier
  $multiplier: $val;
  
  // default $unit value
  $unit: rem;
  
  @if type-of($val) == number and $val != 0 {
    
    // determine the unit for $val
    $val: separateUnit($val);
    
    @if last($val) != false {
      $unit: last($val);
    }
    
    $val: first($val);

    // determine the multiplier
    @if $ie {
      @if $unit == rem {
        $multiplier: $val * $fontSizeBase * 1px;
      } @else {
        $multiplier: $val * 1px;
      }
    } @else {
      @if $unit == rem {
        $multiplier: $val * 1rem;
      } @else {
        $multiplier: $val / $fontSizeBase * 1rem;
      }
    }

  }

  @return $multiplier;
}



/* ---------------------------------------------------------------------- *\
  REM to PX SWITCHER
\* ---------------------------------------------------------------------- */

@function rem($val) {
  $cVal: ();

  @if type-of($val) == list {
    
    @each $i in $val {
      $i: multiplier($i);
      $cVal: append($cVal, $i);
    }
  
  } @else if type-of($val) == number{
  
    $cVal: multiplier($val);
  
  } @else {
    $cVal: $val;
  }

  @return $cVal;
}


/* ---------------------------------------------------------------------- *\
  IMAGES
  $name - the filename in quotes. e.g 'image.png'
\* ---------------------------------------------------------------------- */

@function path($name,$type: false) {
  $path: null;
  
  @if $type == image {
    $path: $imgPath;
  } @else if $type == svg {
    $path: $svgPath;
  } @else if $type == icons {
    $path: $iconsPath;
  }

  @return unquote('url(') + $path + $name + unquote(')');
}
