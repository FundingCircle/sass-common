@charset "UTF-8";
/* ---------------------------------------------------------------------- *\
  BORDER RADIUS
  e.g: borderRadius(10,'%') -> border-radius: 10%;
\* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- *\
  BOX SHADOW
  wip
\* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- *\
  BOX SIZING
  this should always be border-box
\* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- *\
  GRADIENT GENERATOR 
  Usage: @include gradient($orientation,($colorList),[$angle]);
  $orientation: string -> horizontal / vertical / radial / angle
  $colorList: a list of pairs for color stops (color percentage)
             e.g (rgb(0,0,0) 0%, rgb(255,255,255) 15%, rgb(0,0,0) 100%)
  $angle: if $orientation: angle, then here you set the angle degree
           e.g. @include gradient(angle,(...),50deg);
\* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- *\
  OPACITY
  argument between 0 and 1
\* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- *\
  POSITION
\* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- *\
  RGBA
 
  Credits: @cballenar â€” January 4th, 2014

  A SCSS mixin to create RGB fallbacks for RGBa styles.

  This mixin takes up to 4 arguments (minimum of two)
   - $property: the css property to be used,      e.g.: 'border'
   - $attributes: the additional attributes,      e.g.: '1px solid'
   - $color: the translucent color to be used,    e.g.: 'rgba(240,20,200,.5)'
   - $background: color that will be used in mix, e.g.: '#DADADA'

  You're required to enter at least the $property and $color variables, so you end up
  with the following options:
   - @include alpha-me($property, $color);
   - @include alpha-me($property, $color, $background);
   - @include alpha-me($property, $attributes, $color);
   - @include alpha-me($property, $attributes, $color, $background);

  E.g:
    .element { 
      @include alpha-me( color, rgba(black,.5) );

      @include alpha-me( background-color, rgba(#dffa14,.5), #529ef0);

      @include alpha-me( box-shadow, 1px 1px 2px, rgba(white, .25));

      @include alpha-me( border, 3px solid, rgba(240,20,200,.5), #DADADA); }

  
  Notes
   - If no background color is specified, white is used by default
   - We can use the rgba SASS function to enter the translucent color in other formats
     - rgba(red, .5)
     - rgba(#dffa14, .75)
   - Can you think of a better name for the mixin? I'm not in love with it...

\* ---------------------------------------------------------------------- */
/* ---------------------------------------------------------------------- *\
  TRANSITION
  $property: all / background / color / height / width / outline
  $duration: any number
  $unit: ms / s
  $function: ease / linear / ease-in / ease-out / ease-in-out
\* ---------------------------------------------------------------------- */