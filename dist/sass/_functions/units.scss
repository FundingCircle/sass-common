// Units
//
// Everything related to units
//
// Styleguide 1.3



// Strip unit
//
// Remove the unit from a number
//
// markup:
// stripUnit($value)
// // $item: 10rem
// // stripUnit($item) -> 10
//
// Styleguide 1.3.1

@function stripUnit($value) {
  @return $value / ($value * 0 + 1);
}



// Separate unit and values
//
// Input a value and it returns a list with the unitless value and unit
//
// markup:
// separateUnit($val)
// // $item: 10rem
// // separateUnit($item) -> (10, rem)
//
// Styleguide 1.3.2

@function separateUnit($val) {
  $unit: false;

  @if unit($val) != '' {
    $unit: unquote(unit($val));
    $val: stripUnit($val);
  }

  @return($val,$unit);
}



// Unitless to pixels
//
// Converts a unitless value to pixels
//
// markup:
// unitless($val)
// // $item: 10
// // unitless($item) -> 10px
//
// Styleguide 1.3.3

@function unitless($val) {

  @if type-of($val) == number {
    $val: stripUnit($val) * 1px;
  }

  @return $val;
}



// Negative value
//
// Returns the negative of a value
//
// markup:
// negative($val)
// // negative(10rem) -> -10rem
// // negative(true) -> false
//
// Styleguide 1.3.4

@function negative($val) {
  @if $val == true {
    $val: false;
  } @else if $val == false {
    $val: true;
  } @else {
    $val: $val * (-1);
  }
  @return $val;
}



// Convert PX <-> REM
//
// It returns PX or REM values, depending on the $REMsupport flag value
// This is a support function for rem(). You should use that for managing PX vs REM
//
// markup
// multiplier($val)
// // considering 1rem = 16px
// // multiplier(16px) -> 1rem
// // multiplier(2rem) -> 32px

@function multiplier($val) {

  // just to make sure we have a fallback for multiplier
  $multiplier: $val;

  // default $unit value
  $unit: rem;

  @if type-of($val) == number and $val != 0 {

    // determine the unit for $val
    $val: separateUnit($val);

    @if last($val) != false {
      $unit: last($val);
    }

    $val: first($val);

    // determine the multiplier
    @if $REMsupport {
      @if $unit == rem {
        $multiplier: $val * 1rem;
      } @else if $unit == unquote('%') {
        $multiplier: $val * 1%;
      } @else {
        $multiplier: $val / $fontSizeBase * 1rem;
      }
    } @else {
      @if $unit == rem {
        $multiplier: $val * $fontSizeBase * 1px;
      } @else if $unit == unquote('%') {
        $multiplier: $val * 1%;
      } @else {
        $multiplier: $val * 1px;
      }
    }

  }

  @return $multiplier;
}



// REM vs PX switcher
//
// Converts the inputed values to PX or REM, depending on the $REMsupport value (true / false)
//
// markup:
// rem($val)
// // $REMsupport: true
// // rem(10rem auto 3rem 0) -> 10rem auto 3rem 0
// // $REMsupport: false
// // rem(10rem auto 3rem 0) -> 160px auto 30rem 0
//
// Styleguide 1.3.5

@function rem($val) {
  $cVal: ();

  @if type-of($val) == list {

    @each $i in $val {
      $i: multiplier($i);
      $cVal: append($cVal, $i);
    }

  } @else if type-of($val) == number{

    $cVal: multiplier($val);

  } @else {
    $cVal: $val;
  }

  @return $cVal;
}
