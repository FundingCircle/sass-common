/* ---------------------------------------------------------------------- *\
  FORMS
\* ---------------------------------------------------------------------- */

@include keyframes(loopRotate) {
  0% {
    @include prefix(transform, rotate(0), webkit ms);
  }

  100% {
    @include prefix(transform, rotate(360deg), webkit ms);
  }
}

.wrap--form {
  @include wrapThis($mobileFormGutterSize, $formBreakpoint false);
  @include breakPoints(false, $formBreakpoint) {
    & > *:not([class*="form-default"]) {
      padding-left: $mobileFormGutterSize;
      padding-right: $mobileFormGutterSize;
    }
  }

  & > h1 {
    @include font(4, true, 300);

    margin-top: rem(1);
    margin-bottom: rem(1);
  }

  & > h2 {
    @include font(2, true, 300);
    margin-bottom: rem(1);
  }

  & > h2,
  & > h2 + p {
    @extend .form-default-col--large;
    float: none;
  }

}

@mixin placeholderStyle {
  @include opacity(0.4);
  font-style: italic;
  color: $colorFontDarkSoft;
}

// scss-lint:disable VendorPrefix
::-webkit-input-placeholder { @include placeholderStyle; }
     :-ms-input-placeholder { @include placeholderStyle; }
         ::-moz-placeholder { @include placeholderStyle; }
          :-moz-placeholder { @include placeholderStyle; }
// scss-lint:enable VendorPrefix

.form-default {
  @include font(0);
  @extend .cl--a;
  padding: $mobileFormGutterSize;
  margin: 0;
  border: 0;
  color: $colorFontDarkSoft;
  background: $colorBackground2;

  // cols
  @include breakPoints($formBreakpoint, false) {
    @include cols($formColsRatio);

    padding: $desktopFormGutterSize;

    .wrap--form & {
      float: left;
    }

    &-col {
      &--small {
        float: right;
        padding-left: rem(2);
        margin-bottom: rem(2);
      }
    };
  }

  .wrap--form & {
    @extend .form-default-col--large;
  }

  &_column-wrap {
    @include breakPoints($bpMobilePortraitLarge, false) {
      margin-bottom: rem(2);

      & > *:nth-child(n+2) {
        padding-left: rem(1);
      }
    }

    &--3columns {
      @extend .form-default_column-wrap;
      @include table(top, 0 $bpMobilePortraitLarge, false, 4 6 5, false, 0);
    }

    &--2columns {
      @extend .form-default_column-wrap;
      @include table(top, 0 $bpMobilePortraitLarge, false, 5 3, false, 0);
    }
  }

  &_dob-wrap {
    @extend .form-default_column-wrap--3columns;
  }

  &_date-wrap {
    @extend .form-default_column-wrap--2columns;
  }

  &_info-box {
    background: rgb(255,255,255);
    padding: $mobileFormGutterSize;

    @include breakPoints(0, $formBreakpoint) {
      border-bottom: 4px solid $ColorBrand1;
    }

    @include breakPoints($formBreakpoint, false) {
      border-left: 4px solid $ColorBrand1;
      padding: $desktopFormGutterSize;
    }

    h5 {
      color: $ColorBrand1;
      @include font(0, true, 400);
    }

    p {
      @include font(-1);
    }
  }

  & > .btn { float: right; }

  .btn--primary:last-child {
    margin-bottom: 0;
  }

  label,
  legend {
    display: block;
    font-weight: 300;
    margin-bottom: rem(0.5);

    &.required:after {
      content: '*';
      color: $ColorBrand2;
      padding-left: 0.3em;
    }
  }

  fieldset {
    padding: 0;
    margin: 0;
    border: 0;
  }

  p {
    font-weight: 300;
  }

  &_wrap {
    @extend .cl--a;
    margin-bottom: rem(3);
  }

  &_element {
    position: relative;
    margin-bottom: rem(1.5);

    &.is-loading:before {
      content: '';
      display: block;
      background: path('input-loader.gif',image) no-repeat center center;
      width: 20px;
      height: 20px;
      position: absolute;
      top: rem(.6);
      right: rem(.6);
      @include animation(loopRotate 2s linear infinite);

    }

    &--tooltip {
      @extend .form-default_element;
      display: table;
      width: 100%;
    }
  }

  // all form fields, except checkbox and radio
  %inputStyle {
    @include font(0, false);
    min-height: rem(2.5);
    line-height: rem(2.5);
    display: block;
    width: 100%;
    background: $formInputBackgroundMain;
    border: 0;
    outline: 1px solid $formInputBorderMain;
    padding: rem(0 1);
    outline-offset: initial;

    &:focus {
      outline-color: $ColorBrand3;
    }

    &.valid {
      border-right: 4px solid $colorSuccess;
    }

    &.error {
      outline-color: $colorError;
      color: $colorError;
    }
  }

  // inset elements
  %inputStyleInline {
    @include boxShadow(0, 0.0625, 0.0625, 0, rgba(0,0,0,0.2), true);
  }

  $inputTypes: (text, password, search, email, url, tel, number, range, date, month, week, time);

  @each $type in $inputTypes {
    input[type="#{$type}"] {
      @extend %inputStyle;
      @extend %inputStyleInline;
    }
  }

  .select,
  textarea {
    @extend %inputStyle;
  }

  textarea {
    @extend %inputStyleInline;
    padding: rem(1 1);
    line-height: normal;
  }

  %select {
    position: relative;
    height: rem(2.5);

    &:before,
    &:after {
      content: '';
      display: block;
      position: absolute;
      z-index: 1;
    }

    html:not(.ie) & {
      &:after {
        @include triangle(down, $colorFontDarkSoft, $selectArrowHeight $selectArrowWidth);
        @include posAbs($top: 0, $bottom: 0);

        margin: auto 0;
      }
    }

    select {
      @include borderRadius(0);

      &:-moz-focusring {
        transition: none;
        text-shadow: 0 0 0 rgb(0,0,0);
        color: transparent;
      }

      @include prefix(appearance, none, webkit moz);
      &::-ms-expand {
        display: none;
      }

      margin: 0;
      background: none;
      border: 0;

      width: 100%;
      height: 100%;
      vertical-align: middle;
      z-index: 2;

      padding: rem(0 1);

      .ie & {
        padding: rem(0.5 1);
      }
    }

    option {
      padding: rem(0.5 1);
    }

  }

  .select {
    @extend %select;


    html:not(.ie) & {
      &:before {
        width: $selectIconWidth;
        height: 100%;
        top: 0;
        right: 0;
        border-left: 1px solid $formInputBorderMain;
      }

      &:after {
        right: $selectArrowPosRight;
      }
    }

    %select-error,
    .select.error {
      @extend %select;
      @extend .error;
    }

    %select-valid,
    .select.valid {
      @extend %select;
      @extend .valid;
    }

    select {
      @include centerAbs();
      @include boxShadow(0, 0.0625, 0.0625, 0, rgba(0,0,0,0.1));


      &:focus {
        outline: 1px solid $ColorBrand3;
        outline-offset: 0;
      }

      &.valid { @extend %select-valid; }
      &.error {
        outline-width: 1px;
        outline-style: solid;
        @extend %select-error;
      }
    }


  }

  .select--inline {
    @extend %select;
    display: inline-block;


    html:not(.ie) & {
      &:after {
        border-top-color: $colorFontDarkSoft;
        right: rem(.5);
      }
    }

    select {
      border-bottom: 2px solid $colorDividerMain;
      color: $colorFontDarkSoft;
      font-weight: 600;
      padding-right: rem($selectIconWidth / 1.5);
      text-align: center;

      &.error {
        border-bottom-color: $colorError;
      }

      &.valid {
        border-bottom-color: $colorSuccess;
      }

      &:focus {
        outline: 0;
        border-bottom-color: $ColorBrand3;
      }
    }
  }

  .input--inline {
    display: inline-block;
    position: relative;

    &:before {
      @extend .fci-icon;
      @extend .fci-pencil;
      @include posAbs($right: 0, $bottom: rem(.5));
      color: $formInputBorderMain;
    }

    .error-message {
      position: absolute;
      left: 0;
      z-index: 2;
      top: 28px;
      width: inherit;
      display: block;


      a {
        color: inherit;
        text-decoration: underline;
      }
    }

    input {
      @include font(1, true, 600);
      @include prefix(box-shadow, none, webkit);

      background: none;
      display: inline;
      border: 0;
      border-bottom: 2px solid $colorBackground3;
      outline: 0;
      text-align: center;
      padding-right: rem($textIconWidth * 1.5);
      padding-left: rem(.5);
      width: rem(8);

      &.error {
        border-bottom-color: $colorError;
      }

      &.valid {
        border-right: 0;
        border-bottom-color: $colorSuccess;
      }

      &:focus {
        border-color: $ColorBrand3;
      }
    }

    .form-default_autocomplete {
      display: block;
      width: rem(16);
      position: absolute;
      left: 0;
      top: 35px;
      z-index: 2;
    }
  }

  // error message
  .error-message {
    @include font(0);
    margin-top: rem(1);
    position: relative;
    width: 100%;
    color: rgb(255,255,255);
    background: $colorError;
    padding: rem(.8 1);

    &:before {
      @include triangle(up, $colorError, ($errorMessageArrowHeight * 2) $errorMessageArrowHeight);
      content: '';
      position: absolute;
      top: negative($errorMessageArrowHeight);
      left: rem(2);

    }


    a {
      color: inherit;
      text-decoration: underline;
    }
  }


  // tooltip
  &_tooltip {

    @include font(0);
    @include boxShadow(0, 0, 0.3, 0, rgba(0,0,0,0.1));

    height: 0;
    padding: 0;
    display: table-caption;
    z-index: 1;
    position: relative;
    top: 0;
    left: 0;
    background: $tooltipBackground;
    color: $ColorBrand1;
    overflow: hidden;

    &:before {
      content: '';
      position: absolute;
    }

    :focus ~ &,
    &.is-visible {
      height: auto;
      padding: rem(.8 1);
      overflow: visible;
    }

    @include breakPoints(0, $formBreakpoint) {

      :focus ~ &,
      &.is-visible {
        margin-bottom: rem(1);

        &:before {
          @include triangle(down, $tooltipBackground, ($tooltipArrowHeight * 2) $tooltipArrowHeight);
          bottom: negative($tooltipArrowHeight);
          left: rem(2);
        }
      }
    };

    @include breakPoints($formBreakpoint, false) {
      width: 250px;
      position: absolute;
      left: 100%;
      margin-left: rem(1);

      :focus ~ &:before,
      &.is-visible:before {
        @include triangle(left, $tooltipBackground, ($tooltipArrowHeight * 2) $tooltipArrowHeight);
        top: rem(.8);
        left: negative($tooltipArrowHeight);
      }
    }

  }

  &_autocomplete {
    @include resetList;
    background: rgb(255,255,255);
    outline: 1px solid $ColorBrand2;
    margin-top: 8px;

    color: $ColorBrand2;
    text-transform: uppercase;

    li {
      padding: rem(.5);
      cursor: pointer;

      &:hover,
      &.is-active {
        font-weight: 600;
      }

      &:not(:last-child) {
        border-bottom: 1px solid $ColorBrand2;
      }
    }

    &-note {
      @include font(-1);
      color: $colorFontDarkHard;
      text-transform: none;
    }
  }

  // chars left
  &_chars-left {
    text-align: right;
    @include font(-1);
    margin: rem(0.2 0);
  }
}















/* ---------------------------------------------------------------------- *\
  MESSAGES
  - .message / --error / --warning / --success
\* ---------------------------------------------------------------------- */

.message {

  &,
  &--error,
  &--warning,
  &--success {
    @include boxShadow(0, 0.0625, 0.0625, 0, rgba(0,0,0,0.1));
    background: rgb(255,255,255);
    padding: rem(.7 1);
    margin-bottom: rem(2);
    position: relative;

    $borderColor: $colorMessage;

    @include breakPoints(0, $formBreakpoint) {
      border-bottom: 4px solid $borderColor;
      text-align: center;

      &:before {
        margin: rem(0 auto 1);
      }
    }

    @include breakPoints($formBreakpoint, false) {
      border-left: 4px solid $borderColor;
      padding-left: rem(5);

      &:before {
        position: absolute;
        top: 0;
        bottom: 0;
        left: rem(1);
        margin: auto 0;
      }
    }

    & > :last-child {
      margin-bottom: 0;
    }

    &:before {
      @extend .fci-icon;

      color: $borderColor;
      display: block;
      font-size: rem(2.5);
      line-height: rem(2.5);
      height: rem(2.5);
    }

    &_title {
      @include font(2, true, 300);
      display: block;
      margin-bottom: rem(.5);
    }

  }

  & {
    &:before {
      @extend .fci-info;
    }
  }


  &--error {

    $borderColor: $colorError;

    &:before {
      @extend .fci-attention;
      color: $borderColor;
    }

    @include breakPoints(0, $formBreakpoint) {
      border-bottom-color: $borderColor;
    }

    @include breakPoints($formBreakpoint, false) {
      border-left: 4px solid $borderColor;
    }
  }

  &--warning {

    $borderColor: $colorWarning;

    &:before {
      @extend .fci-attention;
      color: $borderColor;
    }

    @include breakPoints(0, $formBreakpoint) {
      border-bottom-color: $borderColor;
    }

    @include breakPoints($formBreakpoint, false) {
      border-left: 4px solid $borderColor;
    }
  }


  &--success {

    $borderColor: $colorSuccess;

    &:before {
      @extend .fci-tick;
      color: $borderColor;
    }

    @include breakPoints(0, $formBreakpoint) {
      border-bottom-color: $borderColor;
    }

    @include breakPoints($formBreakpoint, false) {
      border-left: 4px solid $borderColor;
    }
  }
}









/* ---------------------------------------------------------------------- *\
  CUSTOM CHECKBOXES AND RADIO BUTTONS
  - .form-radio / .form-checkbox if you don't want the positioning
  - .form-radio.form-radio--top/right/bottom/left if you want the positioning
\* ---------------------------------------------------------------------- */


.form {

  &-radio,
  &-checkbox {
    position: relative;

    [class*="ie"][class*="8"] & input {
      z-index: 2;
    }

    .ui-checkbox,
    .ui-radio {
      position: relative;
      display: block;
      height: $optionSize;
      width: $optionSize;
      z-index: 1;

      &:before,
      &:after {
        @include centerAbs(1);
        display: block;
      }

      &:before {
        z-index: 2;
      }

      &:after {
        content: '';
        background: rgb(255,255,255);
        border: 1px solid $formInputBorderMain;
      }
    }

    &--left { @extend %posLeft; }
    &--right { @extend %posRight; }
    &--bottom { @extend %posBottom; }
    &--top { @extend %posTop; }
    &--inline { float: left; margin-right: rem(1); }
  }

  &-checkbox input:focus ~ label .ui-checkbox:after,
  &-radio input:focus ~ label .ui-radio:after {
    border-color: $ColorBrand3;
  }

  &-radio {
    label {
      .ui-radio {
        &:before,
        &:after {
          @include borderRadius(50, '%');
        }

        &:before {
          content: '';
          width: 0;
          height: 0;
          background: $colorCtaPrimary;

        }
      }
    }

    input:checked ~ label .ui-radio:before {
      width: $optionSize / 2;
      height: $optionSize / 2;
    }

  }

  &-checkbox {
    label {
      .ui-checkbox {
        &:before {
          @extend .fci-icon;
          @extend .fci-tick;

          right: auto;
          margin: auto 0 auto 15%;
          line-height: $optionSize;
          color: $colorCtaPrimary;
          overflow: hidden;
          width: 0;
        }
      }
    }

    input:checked ~ label .ui-checkbox:before {
      width: 70%;
    }
  }

}



@mixin customOptionSelector {
  input,
  .ui-radio,
  .ui-checkbox {
    position: absolute;
    @content;
  }
}

%posLeft {
  @include customOptionSelector {
    top: 0;
    left: 0;
  }

  input {
    top: $customOptionOffset;
    left: $customOptionOffset;
  }

  label {
    padding-left: $optionPaddingSize;
    line-height: $optionSize;
  }
}

%posRight {
  @include customOptionSelector {
    top: 0;
    right: 0;
  }

  input {
    top: $customOptionOffset;
    right: $customOptionOffset;
  }

  label {
    padding-right: $optionPaddingSize;
    line-height: $optionSize;
    text-align: right;
  }
}

%posTop {
  @include customOptionSelector {
    top: 0;
    left: 0;
    right: 0;
    margin: 0 auto;
  }

  input {
    top: $customOptionOffset;
  }

  padding-top: $optionSize + ($fontSizeBase / 2 * 1px);
  text-align: center;
}

%posBottom {
  @include customOptionSelector {
    bottom: 0;
    left: 0;
    right: 0;
    margin: 0 auto;
  }

  input {
    bottom: $customOptionOffset;
  }

  label {
    padding-bottom: $optionSize + ($fontSizeBase / 2 * 1px);
    text-align: center;
  }
}




/* ---------------------------------------------------------------------- *\
  TOOLTIPS
  - text to click / hover goes into .tooltip_trigger
  - if tooltip_clickable, then the parent should toggle class .is-active
  - is-right if doesn't fit in left
\* ---------------------------------------------------------------------- */

.tooltip {
  position: relative;

  &_content {
    @include font(-1, true);
    @include posAbs(false, false, 100%, negative($inputTooltipArrowPadding + $inputTooltipArrowWidth), -1);
    @include boxShadow(0, 0, 0.3, 0, rgba(0,0,0,0.1));

    display: block;
    @include opacity(0);
    overflow: hidden;
    background: rgb(255,255,255);
    min-width: 220px;
    max-width: 450px;
    padding: rem(1);
    border-top: 4px solid $ColorBrand1;
    margin-bottom: rem(1);

    &:before {
      @include triangle(down, rgb(255,255,255), ($inputTooltipArrowWidth * 2) $inputTooltipArrowWidth);
      @include posAbs(false, false, -15px, $inputTooltipArrowPadding + .5);
      content: '';
    }

    &.is-right {
      left: auto;
      right: rem(negative($inputTooltipArrowPadding + $inputTooltipArrowWidth));

      &:before {
        left: auto;
        right: rem($inputTooltipArrowPadding + .5);
      }
    }
  }

  &_title {
    @include font(1);
    display: block;
    color: $ColorBrand1;
    margin-bottom: rem(.5);
  }

  &_text {
    @extend p;
    display: block;

    &:last-child {
      margin-bottom: 0;
    }
  }

  &_symbol {
    @include borderRadius(50, '%');
    display: inline-block;
    width: 1.2em;
    height: 1.2em;
    line-height: 1.2em;
    font-size: .8em;
    text-align: center;
    color: $colorFontLight;
    background: $colorCtaNav;
    cursor: pointer;
    vertical-align: middle;

    &:before {
      content: '?';
    }

    &:hover {
      background: $colorCtaPrimary;
    }
  }

  &.is-active,
  .tooltip_trigger:not(.tooltip_clickable):hover +,
  .tooltip_trigger:not(.tooltip_clickable):focus + {
    .tooltip_content {
      overflow: visible;
      @include opacity(1);
      z-index: 100;
    }
  }

  &_close {
    position: absolute;
    top: rem(1);
    right: rem(1);
    color: $colorCtaNav;

    &:hover {
      text-decoration: none;
      color: $colorCtaPrimary;
    }

    &:before {
      @extend .fci-icon;
      @extend .fci-close;
    }
  }
}



/* ---------------------------------------------------------------------- *\
  SWITCH BUTTON
  Turn on and off
\* ---------------------------------------------------------------------- */

.form-switch {
  position: relative;
  line-height: rem(2.5);
  height: rem(2.5);
  cursor: pointer;
  font-weight: 400;
  display: block;
  max-width: 100px;
  text-align: center;
  border: 1px solid $ColorBrand2;
  border-radius: 5px;
  overflow: hidden;
  background: $colorBackgroundMain;

  input {
    position: absolute;
    opacity: 0;

    &:checked ~ span:after {
      left: 0;
    }
  }

  span {
    &:before,
    &:after {
      position: absolute;
      width: 100%;
      height: 100%;
      top: 0;
      left: 0;
    }

    &:before {
      content: attr(data-off);
    }

    &:after {
      content: attr(data-on);
      left: -100%;
      background-color: $ColorBrand2;
      color: $colorBackgroundMain;
    }
  }
}
